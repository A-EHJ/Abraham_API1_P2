@page "/Consultar/Entradas"
@using Abraham_API1_P2.Shared.Models;

@inject HttpClient httpClient
@inject NotificationService notificationService

<PageTitle>Consultar Entradas</PageTitle>

<div class="card">
    <div class="card-header">
        <h3 class="centrar-texto">Consulta de Entradas</h3>
    </div>
    <div class="card-body">
        <div class="input-group-text">
            
            <label class="form-control-label col-1">Desde:</label>
            <div class="col-3">
                <input class="form-control" type="date" @bind="Desde" />
            </div>

            <label class="form-control-label col-1">Hasta:</label>
            <div class="col-3">
                <input class="form-control" type="date" @bind="Hasta" />
            </div>

            <div class="col-5">
                <button type="button" @onclick="Buscar" class="btn btn-primary  ">
                    <i class="oi oi-reload" />
                    <br /> Buscar
                </button>
            </div>

        </div>

        <br />
        <div class="row">
            <div class="col-3">
                <label class="form-control-label">Filtrar Por</label>
                <InputSelect @bind-Value="FiltrarPor" class="form-select">
                    <option value="-2" disabled selected> [Seleccione] </option>
                    <option value="-1">Solo por fecha</option>
                    <option value="0">Id</option>
                    <option value="1">Concepto</option>
                    <option value="2">PesoTotal</option>
                    <option value="3">ProductoId</option>
                    <option value="4">CantidadProducida</option>
                </InputSelect>
            </div>
            <div class="col-3">
                @if (FiltrarPor == -1)
                {

                }
                else{
                    if (FiltrarPor == 0 || EntradaId > 0)
                    {
                        <label class="form-control-label">Id</label>
                        <InputNumber @bind-Value="EntradaId" class="form-control"></InputNumber>
                    }
                    if (FiltrarPor == 1 || !string.IsNullOrEmpty(Concepto))
                    {
                        <label class="form-control-label">Concepto</label>
                        <InputText @bind-Value="Concepto" class="form-control"></InputText>
                    }
                    if (FiltrarPor == 2 || PesoTotal > 0)
                    {
                        <label class="form-control-label">Peso Total</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="PesoTotal" class="form-control"></InputNumber>
                            <h6>Se buscará un rango de +/- 10% del valor ingresado</h6>
                        </div>
                    }
                    if (FiltrarPor == 3 || ProductoId > 0)
                    {
                        <label class="form-control-label">ProductoId</label>
                        <InputNumber @bind-Value="ProductoId" class="form-control"></InputNumber>
                    } 
                    if (FiltrarPor == 4 || CantidadProducida > 0)
                    {
                        <label class="form-control-label">Cantidad Producida</label>
                        <InputNumber @bind-Value="CantidadProducida" class="form-control"></InputNumber>
                    }
                }
            </div>
        </div>

        @if (Entradas is not null)
        {
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>EntradaId</th>
                        <th>Fecha</th>
                        <th>Concepto</th>
                        <th>Peso Total</th>
                        <th>ProductoId</th>
                        <th>Cantidad Producida</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var entradas in Entradas)
                    {
                        <tr>
                            <td>@entradas.EntradaId</td>
                            <td>@entradas.Fecha.ToString("dd/MM/yyyy")</td>
                            <td>@entradas.Concepto</td>
                            <td>@entradas.PesoTotal</td>
                            <td>@entradas.ProductoId</td>
                            <td>@entradas.CantidadProducida</td>
                            <td><a href="Registrar/Entradas/@entradas.EntradaId">Ver</a></td>
                        </tr>
                    }
                    <tr>
                        <td>Conteo = @Conteo</td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                        <td></td>
                    </tr>

                </tbody>

            </table>
        }
    </div>
    <div class="card-footer">
        <div class="form-row justify-content-sm-between" aria-orientation="vertical">
        </div>
    </div>
</div>

@code {
    public List<Entradas> Entradas = new List<Entradas>();

    public int FiltrarPor = -2;
    public int Conteo = 0;

    protected override async Task OnInitializedAsync()
    {
        Desde = DateTime.Now.AddMonths(-1);
        Hasta = DateTime.Now;
        await Buscar();
        PrimeraEntrada = false;
        NotificarBusquedaMultiFiltro();
    }

    public int EntradaId { get; set; }
    public string? Concepto { get; set; }
    public double PesoTotal { get; set; }
    public int ProductoId { get; set; }
    public int CantidadProducida { get; set; }

    bool PrimeraEntrada = true;

    public DateTime Desde { get; set; }
    public DateTime Hasta { get; set; }

    public async Task Buscar()
    {
        Hasta = new DateTime(Hasta.Year, Hasta.Month, Hasta.Day, 23, 59, 59);
        Entradas = await httpClient.GetFromJsonAsync<List<Entradas>>($"api/Entradas");

        if (Entradas.Count() == 0)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error",
                    Detail = "No tiene registros guardados.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            return;
        }

        if (PrimeraEntrada)
        {
            return;
        }

        if (FiltrarPor == -1)
        {
            Entradas = Entradas.Where(x => x.Fecha >= Desde && x.Fecha <= Hasta).ToList();
        }
        else
        {
            Entradas = Entradas.Where(x => x.Fecha >= Desde && x.Fecha <= Hasta &&
                                     (EntradaId == 0 || x.EntradaId == EntradaId) &&
                                     (CantidadProducida == 0 || x.CantidadProducida == CantidadProducida) &&
                                     (string.IsNullOrEmpty(Concepto) || (x.Concepto != null && x.Concepto.ToLower().Contains(Concepto.ToLower()))) &&
                                     (PesoTotal == 0 || (x.PesoTotal >= PesoTotal - (PesoTotal / 10) && x.PesoTotal <= PesoTotal + (PesoTotal / 10))) &&
                                     (ProductoId == 0 || x.ProductoId == ProductoId))
                                     .ToList();

        }

        Conteo = Entradas != null ? Entradas!.Count() : 0;
        if (Entradas.Count() == 0)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha encontrado ningún registro",
                    Detail = "Revise los parámetros utilizados.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
        }
        StateHasChanged();
    }

    public async Task NotificarBusquedaMultiFiltro()
    {
        var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Uso de Multifiltro",
                Detail = "Puede aplicar varios filtros simultáneamente. Seleccione un filtro, ingrese los datos, luego utilice otro filtro y repita el proceso. Verá cómo se acumulan. Para eliminarlos, simplemente ingrese un 0. En el caso de concepto elimine el texto.",
                Duration = 25000
            };
        notificationService.Notify(mensaje);
        await Task.CompletedTask;
    }
}