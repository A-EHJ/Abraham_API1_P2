@page "/Registrar/Entradas"
@page "/Registrar/Entradas/{EntradaId:int}"
@using System.Text.RegularExpressions;
@using Abraham_API1_P2.Shared.Models;
@inject NotificationService notificationService
@inject HttpClient httpClient

<PageTitle>Registrar Entradas</PageTitle>

<EditForm Model="Entradas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h3 class="text-center">Registro de Entradas</h3>
            </div>
            <div class=card-body>

                @*Entrada Id*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label>Entrada Id</label>
                    <div class="input-group mb-3">
                        <InputNumber @bind-Value="Entradas.EntradaId" class="form-control" aria-describedby="BotonBuscar" />
                        <button @onclick="Buscar" class="btn btn-outline-primary" type="button" id="BotonBuscar"><i class="oi oi-magnifying-glass" /></button>
                    </div>
                </div>

                @*Fecha*@
                <div class="col-xs-12 col-sm-12 col-md-8 col-lg-6 col-xl-4">
                    <label class="form-label">Fecha</label>
                    <InputDate @bind-Value="Entradas.Fecha" class="form-control" />
                    <ValidationMessage For="@(() => Entradas.Fecha)" />
                </div>

                @*Concepto*@
                <div class="mb-3">
                    <label class="form-label">Concepto</label>
                    <InputText @bind-Value="Entradas.Concepto" class="form-control" placeholder="Nombre del solicitante" />
                    <ValidationMessage For="@(() => Entradas.Concepto)" />
                </div>

                 @*DETALLE*@
                <fieldset class="border-secondary border border-1">
                    <h3 class="text-center">Productos Utilizados</h3>
                    <div class="row m-1">
                        @*Producto *@
                        <div class="col-7">
                            <label class="form-control-label">Producto</label>
                            <InputSelect class="form-select" @bind-Value="ProductoSeleccionadoUtilizado">
                                <option value="0" disabled selected> [Seleccione] </option>
                                @foreach (var Producto in ProductosList)
                                {
                                    if (Producto.Tipo == 0) {
                                        <option value="@Producto.ProductoId">@Producto.Descripción </option>
                                    
                                    }
                                }
                            </InputSelect>
                        </div>

                        <div class="col-3">
                            <label class="form-control-label">Cantidad</label>
                            <InputNumber @bind-Value="Cantidad" class="form-control"/>
                        </div>

                        <div class="col-2">
                            <button type="button" class="btn btn-outline-primary" @onclick="AgregarDetalle"><i class="oi oi-plus" />Add </button>
                        </div>

                    </div>

                    <div class="row m-1">
                        <hr />
                        <table class="table table-bordered table-light m-1">
                            <thead class="thead">
                                <tr class="table">
                                    <th>ProductoId</th>
                                    <th>Descripci&oacute;n</th>
                                    <th>Cantidad (gramos)</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var detalle in Entradas.EntradasDetalle)
                                {
                                    <tr>
                                        <td>@detalle.ProductoId</td>
                                        <td>@DescripcionTipo(detalle.ProductoId)</td>
                                        <td>@detalle.CantidadUtilizada</td>
                                        <td> <button type="button" class="btn btn-outline-danger" @onclick="@(() => RemoverDetalle(detalle))">Eliminar <i class="oi oi-trash" /></button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="row justify-content-between">
                            <div class="col-4">
                                <label>Peso Total</label>
                                <div class="input-group mb-3">
                                    <span class="form-control">@Entradas.PesoTotal</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </fieldset>
                
                <br />

                <fieldset class="border-secondary border border-1">
                    <h3 class="text-center">Productos Producidos</h3>
                    <div class="row m-1">
                        @*Producto *@
                        <div class="col-7">
                            <label class="form-control-label">Producto</label>  
                            <InputSelect class="form-select" @bind-Value="Entradas.ProductoId" @onblur=VerificarSeleccionadoProducion>
                                <option value="0" disabled selected> [Seleccione] </option>
                                @foreach (var Producto in ProductosList)
                                {
                                    if (Producto.Tipo == 1)
                                    {
                                        <option value="@Producto.ProductoId">@Producto.Descripción </option>
                                    }
                                }
                            </InputSelect>
                        </div>

                        <div class="col-3">
                            <label class="form-control-label">Cantidad</label>
                            <InputNumber @bind-Value="Entradas.CantidadProducida" @onblur=VerificarProducido class="form-control" />
                        </div>
                    </div>
                </fieldset>

                <div class="card-footer d-flex justify-content-center">
                    <button type="button" class="btn btn-outline-primary" @onclick="Nuevo">Nuevo <i class="oi oi-file" /></button>
                    <button type="submit" class="btn btn-outline-success">Guardar <i class="oi oi-document" /></button>
                    <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"> Eliminar <i class="oi oi-trash" /></button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int EntradaId { get; set; }

    public Entradas Entradas { get; set; } = new Entradas();

    public IEnumerable<Productos> ProductosList { get; set; } = Enumerable.Empty<Productos>();

    //Para el detalle
    public double Cantidad { get; set; }
    int ReduccionAProductoProducido = 0;

    public int ProductoSeleccionadoUtilizado { get; set; }
    int Producido = 0;
    bool ProducidoCambio = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarProductos();

        if (EntradaId > 0)
        {
            this.Entradas.EntradaId = EntradaId;
            await Buscar();
        }
    }

    public async Task Buscar()
    {
        try { await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{Entradas.EntradaId}"); }
        catch (Exception ex)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha encontrado.",
                    Detail = "No se encontró una entrada con el ID que estás buscando. ",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            this.Nuevo();
            return;
        }
        var entradaEncontrada = await httpClient.GetFromJsonAsync<Entradas>($"api/Entradas/{Entradas.EntradaId}");
        if (entradaEncontrada != null)
        {
            this.Entradas = entradaEncontrada;
            ReduccionAProductoProducido = Entradas.CantidadProducida;
            Producido = Entradas.ProductoId;
            ProducidoCambio = true;
            StateHasChanged();
        }
    }

    public void Nuevo()
    {
        this.Entradas = new Entradas();
        ReduccionAProductoProducido = 0;
        CargarProductos();
        Producido = 0;
        ProducidoCambio = false;
    }

    public async Task Eliminar()
    {
        var EntradaRemover = Entradas;
        using var response = await httpClient.DeleteAsync($"api/Entradas/{Entradas.EntradaId}");
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha eliminado",
                    Detail = "Error: " ?? response.ReasonPhrase,
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            return;
        }

        var DetallesQueSeEliminaran = new List<EntradasDetalle>();
        foreach (var detalle in EntradaRemover.EntradasDetalle)
        {
            DetallesQueSeEliminaran.Add(detalle);
        }

        foreach (var detalle in DetallesQueSeEliminaran)
        {
            RemoverDetalle(detalle);
        }

        for (int i = 1; i < ProductosList.Count() + 1; i++)
        {
            var ProductoUpdate = ProductosList.FirstOrDefault(p => p.ProductoId == i);
            if (ProductoUpdate.ProductoId == Entradas.ProductoId)
                ProductoUpdate.Existencia -= Entradas.CantidadProducida;
            if (ProductoUpdate != null)
            {
                await httpClient.PutAsJsonAsync($"api/Productos/{i}", ProductoUpdate);
            }
        }
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Eliminado",
                    Detail = "Ha sido eliminado con exito.",
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
        }
        return;
        Nuevo();
    }


    public async Task Guardar()

    {
        if (Entradas.EntradasDetalle.Count == 0)
        {
            var mensaje = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = "No se puede guardar un registro sin detalles.",
                Duration = 4000
            };
            notificationService.Notify(mensaje);
            return;
        }
        await VerificarProducido();
        if (Entradas.ProductoId != Producido)
        {
            ProducidoCambio = true;
        }
        using var response = await httpClient.PostAsJsonAsync("api/Entradas", Entradas);
        if (!response.IsSuccessStatusCode)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No se ha guardado la Entrada.",
                    Detail = "Error: " ?? response.ReasonPhrase,
                    Duration = 4000
                };
            notificationService.Notify(mensaje);
            return;
        }
        var EntradaDevuelto = await response.Content.ReadFromJsonAsync<Entradas>();
        if (EntradaDevuelto is not null)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Entrada guardada exitosamente",
                    Detail = "Su Entradas ha sido guardada con éxito.",
                    Duration = 4000
                };

            notificationService.Notify(mensaje);
            Entradas = EntradaDevuelto;
            if (ProducidoCambio)
            {
                for (int i = 1; i < ProductosList.Count() + 1; i++)
                {
                    var ProductoUpdate = ProductosList.FirstOrDefault(p => p.ProductoId == i);

                    if(ProductoUpdate.ProductoId == Producido)
                        ProductoUpdate.Existencia -= ReduccionAProductoProducido;

                    if (ProductoUpdate.ProductoId == Entradas.ProductoId)
                        ProductoUpdate.Existencia += Entradas.CantidadProducida;

                    if (ProductoUpdate != null)
                        await httpClient.PutAsJsonAsync($"api/Productos/{i}", ProductoUpdate);
                }
                StateHasChanged();

            }
            else
            {
                for (int i = 1; i < ProductosList.Count() + 1; i++)
                {
                    var ProductoUpdate = ProductosList.FirstOrDefault(p => p.ProductoId == i);

                    if (ProductoUpdate.ProductoId == Entradas.ProductoId)
                        ProductoUpdate.Existencia += Entradas.CantidadProducida - ReduccionAProductoProducido;

                    if (ProductoUpdate != null)
                        await httpClient.PutAsJsonAsync($"api/Productos/{i}", ProductoUpdate);
                }
                StateHasChanged();
            }

        }
    }

    public async Task AgregarDetalle()
    {
        if (ValidarDetalle())
        {
            var detalle = new EntradasDetalle
                {
                    EntradaId = Entradas.EntradaId,
                    ProductoId = ProductoSeleccionadoUtilizado,
                    CantidadUtilizada = Cantidad
                };
            Entradas.EntradasDetalle.Add(detalle);
            var ProductoUpdate = ProductosList.FirstOrDefault(p => p.ProductoId == ProductoSeleccionadoUtilizado);
            ProductoUpdate.Existencia = ProductoUpdate.Existencia - Cantidad;
            ProductosList.ElementAt(ProductoSeleccionadoUtilizado - 1).Existencia = ProductoUpdate.Existencia;
            Cantidad = 0;
            CalcularPesoTotal();
            StateHasChanged();
        }
    }

    public async Task RemoverDetalle(EntradasDetalle detalleRemover)
    {
        ProductoSeleccionadoUtilizado = detalleRemover.ProductoId;
        Cantidad = detalleRemover.CantidadUtilizada;
        var ProductoUpdate = ProductosList.FirstOrDefault(p => p.ProductoId == detalleRemover.ProductoId);
        ProductoUpdate.Existencia = ProductoUpdate.Existencia + Cantidad;
        ProductosList.ElementAt(detalleRemover.ProductoId - 1).Existencia = ProductoUpdate.Existencia;
        Entradas.EntradasDetalle.Remove(detalleRemover);
        await httpClient.DeleteAsync($"api/Entradas/DeleteEntradasDetalle/{detalleRemover.DetalleId}");
        CalcularPesoTotal();
    }

    public bool ValidarDetalle()
    {   
        if (ProductoSeleccionadoUtilizado == 0)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Producto no válido.",
                    Detail = "Debe seleccionar un producto. Por favor, elija un producto antes de continuar.",
                    Duration = 3000
                };
            notificationService.Notify(mensaje);
            return false;
        }
        if (Cantidad <= 0)
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Warning,
                    Summary = "Cantidad no válida.",
                    Detail = "La cantidad especificada a utilizar debe ser mayor que 0 para poder agregarlo.",
                    Duration = 3000
                };
            notificationService.Notify(mensaje);
            return false;
        }
        if (Cantidad > CantidadProducto(ProductoSeleccionadoUtilizado))
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Cantidad no válida.",
                    Detail = "La cantidad que desea utilizar es mayor que la existente. Solo quedan " + CantidadProducto(ProductoSeleccionadoUtilizado) + " unidades de este producto en stock.",
                    Duration = 5000
                };
            notificationService.Notify(mensaje);
            return false;
        }
        return true;
    }

    private async Task CalcularPesoTotal()
    {
        Entradas.PesoTotal= Entradas.EntradasDetalle.Sum(E => E.CantidadUtilizada);
    }

    private async Task CargarProductos()
    {
        var encontrados = await httpClient.GetFromJsonAsync<IEnumerable<Productos>>("api/Productos");
        if (encontrados != null)
            ProductosList = encontrados;
    }

    public string DescripcionTipo(int tipoId)
    {
        var tipoProducto = ProductosList.FirstOrDefault(t => t.ProductoId == tipoId);
        return tipoProducto!.Descripción;
    }

    public double CantidadProducto(int tipoId)
    {
        var CantidadProducto = ProductosList.FirstOrDefault(t => t.ProductoId == tipoId);
        return CantidadProducto!.Existencia;
    }

    private async Task VerificarSeleccionadoProducion()
    {
        if (Entradas.CantidadProducida <= 0)
        {
            return;
        }
        Entradas.CantidadProducida = 0;
        VerificarProducido();
    }

    private async Task VerificarProducido()
    {
        if (Entradas.ProductoId == 0 || Entradas.CantidadProducida <= 0)
        {
            if (Entradas.CantidadProducida < 0)
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Summary = "Cantidad no válida.",
                        Detail = "La cantidad especificada a utilizar debe ser mayor que 0 para poder agregarlo.",
                        Duration = 3000
                    };
                notificationService.Notify(mensaje);
                Entradas.CantidadProducida = 0;
            }
            return;
        }
        if (Entradas.ProductoId == 6)
        {
            if (Entradas.CantidadProducida > 0 && Entradas.EntradasDetalle.Any(p => p.ProductoId == 1) && Entradas.EntradasDetalle.Any(p => p.ProductoId == 2) && Entradas.EntradasDetalle.Any(p => p.ProductoId == 3))
            {
                if (Entradas.EntradasDetalle.Any(p => p.ProductoId == 4) || Entradas.EntradasDetalle.Any(p => p.ProductoId == 5))
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Productos innecesarios",
                            Detail = "Tiene o Arandano o Ciruela en el detalle, estos no son utilizados para este paquete",
                            Duration = 6000
                        };
                    notificationService.Notify(mensaje);
                    Entradas.CantidadProducida = 0;
                    return;
                }

                double SumaDeGramos = Entradas.EntradasDetalle
                                             .Where(p => p.ProductoId == 1)
                                             .Sum(p => p.CantidadUtilizada) + Entradas.EntradasDetalle
                                             .Where(p => p.ProductoId == 2).Sum(p => p.CantidadUtilizada)
                                             + Entradas.EntradasDetalle.Where(p => p.ProductoId == 3).Sum(p => p.CantidadUtilizada);
                
                if (SumaDeGramos / 226.80 < 1)
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Cantidad utilizada insuficiente.",
                            Detail = "La cantidad que desea utilizar es mayor que la que usted utiliza; el mínimo es 226.80 gramos.",
                            Duration = 4000
                        };
                    notificationService.Notify(mensaje);
                    Entradas.CantidadProducida = 0;
                    return;
                }
                else if (Entradas.CantidadProducida > SumaDeGramos / 226.80)
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Warning,
                            Summary = "Aviso: Cantidad mayor a la existente.",
                            Detail = "La cantidad que desea utilizar es mayor que la que usted quiere utilizar.",
                            Duration = 4000
                        };
                    notificationService.Notify(mensaje);
                    int x = (int)(SumaDeGramos / 226.80);
                    Entradas.CantidadProducida = x;

                    return;
                }
            }
            else
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Productos faltantes.",
                        Detail = "No se puede agregar el producto porque los elementos necesarios, como Maní, Pasas y Pistachos, no están presentes en el carrito de compras. Por favor, asegúrese de que estos productos estén en el carrito antes de continuar.",
                        Duration = 6000
                    };
                notificationService.Notify(mensaje);
                Entradas.CantidadProducida = 0;
                return;
            }
        }
        else if (Entradas.ProductoId == 7)
        {
            if (Entradas.CantidadProducida > 0 && Entradas.EntradasDetalle.Any(p => p.ProductoId == 1) && Entradas.EntradasDetalle.Any(p => p.ProductoId == 3) && ((Entradas.EntradasDetalle.Any(p => p.ProductoId == 4) || Entradas.EntradasDetalle.Any(p => p.ProductoId == 5))))
            {
                if (Entradas.EntradasDetalle.Any(p => p.ProductoId == 2))
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Productos innecesarios",
                            Detail = "Tiene Pistachos en el detalle, este no es utilizado para este paquete",
                            Duration = 6000
                        };
                    notificationService.Notify(mensaje);
                    Entradas.CantidadProducida = 0;
                    return;
                }

                double SumaDeGramos = Entradas.EntradasDetalle
                                             .Where(p => p.ProductoId == 1)
                                             .Sum(p => p.CantidadUtilizada) + Entradas.EntradasDetalle
                                             .Where(p => p.ProductoId == 3).Sum(p => p.CantidadUtilizada)
                                             + Entradas.EntradasDetalle.Where(p => p.ProductoId == 4).Sum(p => p.CantidadUtilizada) 
                                             + Entradas.EntradasDetalle.Where(p => p.ProductoId == 5).Sum(p => p.CantidadUtilizada);
                if ((SumaDeGramos / 226.80) < 1)
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Cantidad utilizada insuficiente.",
                            Detail = "La cantidad que desea utilizar es mayor que la que usted utiliza; el mínimo es 226.80 gramos.",
                            Duration = 4000
                        };
                    notificationService.Notify(mensaje);
                    Entradas.CantidadProducida = 0;
                    return;
                }
                else if (Entradas.CantidadProducida > (SumaDeGramos / 226.80))
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Warning,
                            Summary = "Aviso: Cantidad mayor a la existente.",
                            Detail = "La cantidad que desea utilizar es mayor que la que usted quiere utilizar.",
                            Duration = 4000
                        };
                    notificationService.Notify(mensaje);
                    int x = (int)(SumaDeGramos / 226.80);
                    Entradas.CantidadProducida = x;

                    return;
                }
            }
            else
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Productos faltantes.",
                        Detail = "No se puede agregar el producto porque los elementos necesarios, como Maní, Pasas, Ciruela o Arándano, no están presentes en el carrito de compras. Por favor, asegúrese de que al menos tres de estos productos esté en el carrito antes de continuar.",
                        Duration = 6000
                    };
                notificationService.Notify(mensaje);
                Entradas.CantidadProducida = 0;
                return;
            }
        }
        else if (Entradas.ProductoId == 8)
        {
            if (Entradas.CantidadProducida > 0 && Entradas.EntradasDetalle.Any(p => p.ProductoId == 1) && Entradas.EntradasDetalle.Any(p => p.ProductoId == 2) && Entradas.EntradasDetalle.Any(p => p.ProductoId == 3))
            {
                if (Entradas.EntradasDetalle.Any(p => p.ProductoId == 4) || Entradas.EntradasDetalle.Any(p => p.ProductoId == 5))
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Productos innecesarios",
                            Detail = "Tiene o Arandano o Ciruela en el detalle, estos no son utilizados para este paquete",
                            Duration = 6000
                        };
                    notificationService.Notify(mensaje);
                    Entradas.CantidadProducida = 0;
                    return;
                }

                double SumaDeGramos = Entradas.EntradasDetalle
                                             .Where(p => p.ProductoId == 1)
                                             .Sum(p => p.CantidadUtilizada) + Entradas.EntradasDetalle
                                             .Where(p => p.ProductoId == 2).Sum(p => p.CantidadUtilizada)
                                             + Entradas.EntradasDetalle.Where(p => p.ProductoId == 3).Sum(p => p.CantidadUtilizada);
                if (SumaDeGramos / 90.72 < 1)
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Cantidad utilizada insuficiente.",
                            Detail = "La cantidad que desea utilizar es mayor que la que usted utiliza; el mínimo es 90.72 gramos.",
                            Duration = 4000
                        };
                    notificationService.Notify(mensaje);
                    Entradas.CantidadProducida = 0;
                    return;

                }
                else if (Entradas.CantidadProducida > (SumaDeGramos / 90.72))
                {
                    var mensaje = new NotificationMessage
                        {
                            Severity = NotificationSeverity.Warning,
                            Summary = "Cantidad no válida.",
                            Detail = "La cantidad que desea utilizar es mayor que la que usted quiere utilizar.",
                            Duration = 4000
                        };
                    notificationService.Notify(mensaje);
                    int x = (int)(SumaDeGramos / 90.72);
                    Entradas.CantidadProducida = x;
                    
                    return;
                }
            }
            else
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Productos faltantes.",
                        Detail = "No se puede agregar el producto debido a la ausencia de los siguientes elementos en el carrito: Maní, Pasas y Pistachos. Asegúrese de que estos productos estén en el carrito antes de continuar.",
                        Duration = 6000
                    };
                notificationService.Notify(mensaje);
                Entradas.CantidadProducida = 0;
                return;
            }
        }

    }

}
